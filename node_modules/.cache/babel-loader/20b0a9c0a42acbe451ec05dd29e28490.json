{"ast":null,"code":"/**\n * Reddit API wrapper for the browser (https://git.io/Mw39VQ)\n * @author Sahil Muthoo <sahil.muthoo@gmail.com> (https://www.sahilm.com)\n * @license MIT\n */\n!function (window) {\n  \"use strict\";\n\n  function listing(on, extras) {\n    return extras = extras || [], withFilters(on, [\"after\", \"before\", \"count\", \"limit\", \"show\"].concat(extras));\n  }\n  function fetch(on) {\n    return {\n      fetch: function (res, err) {\n        getJSON(redditUrl(on), res, err);\n      }\n    };\n  }\n  function withFilters(on, filters) {\n    var ret = {};\n    on.params = on.params || {}, filters = filters || [];\n    for (var without = function (object, key) {\n        var ret = {};\n        for (var prop in object) object.hasOwnProperty(prop) && prop !== key && (ret[prop] = object[prop]);\n        return ret;\n      }, i = 0; i < filters.length; i++) ret[filters[i]] = function (f) {\n      return \"show\" === f ? function () {\n        return on.params[f] = \"all\", without(this, f);\n      } : function (arg) {\n        return on.params[f] = arg, without(this, f);\n      };\n    }(filters[i]);\n    return ret.fetch = function (res, err) {\n      getJSON(redditUrl(on), res, err);\n    }, ret;\n  }\n  function redditUrl(on) {\n    var url = \"https://www.reddit.com/\";\n    if (void 0 !== on.subreddit && (url += \"r/\" + on.subreddit + \"/\"), url += on.resource + \".json\", function (object) {\n      var ret = [];\n      for (var prop in object) object.hasOwnProperty(prop) && ret.push(prop);\n      return ret;\n    }(on.params).length > 0) {\n      var qs = [];\n      for (var param in on.params) on.params.hasOwnProperty(param) && qs.push(encodeURIComponent(param) + \"=\" + encodeURIComponent(on.params[param]));\n      url += \"?\" + qs.join(\"&\");\n    }\n    return url;\n  }\n  function getJSON(url, res, err) {\n    get(url, function (data) {\n      res(JSON.parse(data));\n    }, err);\n  }\n  function get(url, res, err) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url, !0), xhr.onload = function () {\n      return res(xhr.response);\n    }, xhr.onerror = function () {\n      if (void 0 !== err) return err(xhr.response);\n    }, xhr.send();\n  }\n  var reddit = window.reddit = {};\n  reddit.hot = function (subreddit) {\n    return listing({\n      subreddit: subreddit,\n      resource: \"hot\"\n    });\n  }, reddit.top = function (subreddit) {\n    return listing({\n      subreddit: subreddit,\n      resource: \"top\"\n    }, [\"t\"]);\n  }, reddit.controversial = function (subreddit) {\n    return listing({\n      subreddit: subreddit,\n      resource: \"controversial\"\n    }, [\"t\"]);\n  }, reddit.new = function (subreddit) {\n    return listing({\n      subreddit: subreddit,\n      resource: \"new\"\n    });\n  }, reddit.about = function (subreddit) {\n    return fetch({\n      subreddit: subreddit,\n      resource: \"about\"\n    });\n  }, reddit.random = function (subreddit) {\n    return fetch({\n      subreddit: subreddit,\n      resource: \"random\"\n    });\n  }, reddit.info = function (subreddit) {\n    return withFilters({\n      subreddit: subreddit,\n      resource: \"api/info\"\n    }, [\"id\", \"limit\", \"url\"]);\n  }, reddit.comments = function (article, subreddit) {\n    return withFilters({\n      subreddit: subreddit,\n      resource: \"comments/\" + article\n    }, [\"comment\", \"context\", \"depth\", \"limit\", \"sort\"]);\n  }, reddit.recommendedSubreddits = function (srnames) {\n    return withFilters({\n      resource: \"api/recommend/sr/\" + srnames\n    }, [\"omit\"]);\n  }, reddit.subredditsByTopic = function (query) {\n    return fetch({\n      resource: \"api/subreddits_by_topic\",\n      params: {\n        query: query\n      }\n    });\n  }, reddit.search = function (query, subreddit) {\n    return withFilters({\n      subreddit: subreddit,\n      resource: \"search\",\n      params: {\n        q: query\n      }\n    }, [\"after\", \"before\", \"count\", \"limit\", \"restrict_sr\", \"show\", \"sort\", \"syntax\", \"t\"]);\n  }, reddit.searchSubreddits = function (query) {\n    return listing({\n      resource: \"subreddits/search\",\n      params: {\n        q: query\n      }\n    });\n  }, reddit.popularSubreddits = function () {\n    return listing({\n      resource: \"subreddits/popular\"\n    });\n  }, reddit.newSubreddits = function () {\n    return listing({\n      resource: \"subreddits/new\"\n    });\n  }, reddit.aboutUser = function (username) {\n    return fetch({\n      resource: \"user/\" + username + \"/about\"\n    });\n  };\n}(window);","map":{"version":3,"names":["window","listing","on","extras","withFilters","concat","fetch","res","err","getJSON","redditUrl","filters","ret","params","without","object","key","prop","hasOwnProperty","i","length","f","arg","url","subreddit","resource","push","qs","param","encodeURIComponent","join","get","data","JSON","parse","xhr","XMLHttpRequest","open","onload","response","onerror","send","reddit","hot","top","controversial","new","about","random","info","comments","article","recommendedSubreddits","srnames","subredditsByTopic","query","search","q","searchSubreddits","popularSubreddits","newSubreddits","aboutUser","username"],"sources":["/Users/chill/Code/School/sharedKeebProjectReact/node_modules/reddit.js/reddit.min.js"],"sourcesContent":["/**\n * Reddit API wrapper for the browser (https://git.io/Mw39VQ)\n * @author Sahil Muthoo <sahil.muthoo@gmail.com> (https://www.sahilm.com)\n * @license MIT\n */\n!function(window){\"use strict\";function listing(on,extras){return extras=extras||[],withFilters(on,[\"after\",\"before\",\"count\",\"limit\",\"show\"].concat(extras))}function fetch(on){return{fetch:function(res,err){getJSON(redditUrl(on),res,err)}}}function withFilters(on,filters){var ret={};on.params=on.params||{},filters=filters||[];for(var without=function(object,key){var ret={};for(var prop in object)object.hasOwnProperty(prop)&&prop!==key&&(ret[prop]=object[prop]);return ret},i=0;i<filters.length;i++)ret[filters[i]]=function(f){return\"show\"===f?function(){return on.params[f]=\"all\",without(this,f)}:function(arg){return on.params[f]=arg,without(this,f)}}(filters[i]);return ret.fetch=function(res,err){getJSON(redditUrl(on),res,err)},ret}function redditUrl(on){var url=\"https://www.reddit.com/\";if(void 0!==on.subreddit&&(url+=\"r/\"+on.subreddit+\"/\"),url+=on.resource+\".json\",function(object){var ret=[];for(var prop in object)object.hasOwnProperty(prop)&&ret.push(prop);return ret}(on.params).length>0){var qs=[];for(var param in on.params)on.params.hasOwnProperty(param)&&qs.push(encodeURIComponent(param)+\"=\"+encodeURIComponent(on.params[param]));url+=\"?\"+qs.join(\"&\")}return url}function getJSON(url,res,err){get(url,function(data){res(JSON.parse(data))},err)}function get(url,res,err){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,!0),xhr.onload=function(){return res(xhr.response)},xhr.onerror=function(){if(void 0!==err)return err(xhr.response)},xhr.send()}var reddit=window.reddit={};reddit.hot=function(subreddit){return listing({subreddit:subreddit,resource:\"hot\"})},reddit.top=function(subreddit){return listing({subreddit:subreddit,resource:\"top\"},[\"t\"])},reddit.controversial=function(subreddit){return listing({subreddit:subreddit,resource:\"controversial\"},[\"t\"])},reddit.new=function(subreddit){return listing({subreddit:subreddit,resource:\"new\"})},reddit.about=function(subreddit){return fetch({subreddit:subreddit,resource:\"about\"})},reddit.random=function(subreddit){return fetch({subreddit:subreddit,resource:\"random\"})},reddit.info=function(subreddit){return withFilters({subreddit:subreddit,resource:\"api/info\"},[\"id\",\"limit\",\"url\"])},reddit.comments=function(article,subreddit){return withFilters({subreddit:subreddit,resource:\"comments/\"+article},[\"comment\",\"context\",\"depth\",\"limit\",\"sort\"])},reddit.recommendedSubreddits=function(srnames){return withFilters({resource:\"api/recommend/sr/\"+srnames},[\"omit\"])},reddit.subredditsByTopic=function(query){return fetch({resource:\"api/subreddits_by_topic\",params:{query:query}})},reddit.search=function(query,subreddit){return withFilters({subreddit:subreddit,resource:\"search\",params:{q:query}},[\"after\",\"before\",\"count\",\"limit\",\"restrict_sr\",\"show\",\"sort\",\"syntax\",\"t\"])},reddit.searchSubreddits=function(query){return listing({resource:\"subreddits/search\",params:{q:query}})},reddit.popularSubreddits=function(){return listing({resource:\"subreddits/popular\"})},reddit.newSubreddits=function(){return listing({resource:\"subreddits/new\"})},reddit.aboutUser=function(username){return fetch({resource:\"user/\"+username+\"/about\"})}}(window);"],"mappings":"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"},"metadata":{},"sourceType":"script"}