[{"/Users/chill/Code/School/sharedKeebProjectReact/src/index.js":"1","/Users/chill/Code/School/sharedKeebProjectReact/src/App.js":"2","/Users/chill/Code/School/sharedKeebProjectReact/src/reportWebVitals.js":"3","/Users/chill/Code/School/sharedKeebProjectReact/src/pages/About.js":"4","/Users/chill/Code/School/sharedKeebProjectReact/src/pages/RedditFeed.js":"5","/Users/chill/Code/School/sharedKeebProjectReact/src/pages/Home.js":"6","/Users/chill/Code/School/sharedKeebProjectReact/src/pages/Layout.js":"7","/Users/chill/Code/School/sharedKeebProjectReact/src/pages/NoPage.js":"8","/Users/chill/Code/School/sharedKeebProjectReact/src/redditAPI.js":"9","/Users/chill/Code/School/sharedKeebProjectReact/src/pages/NewPost.js":"10","/Users/chill/Code/School/sharedKeebProjectReact/src/pages/Popups.js":"11"},{"size":535,"mtime":1666902580387,"results":"12","hashOfConfig":"13"},{"size":941,"mtime":1668652293327,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1666902580388,"results":"15","hashOfConfig":"13"},{"size":2266,"mtime":1668641012827,"results":"16","hashOfConfig":"13"},{"size":1976,"mtime":1666911550420,"results":"17","hashOfConfig":"13"},{"size":8372,"mtime":1668651787194,"results":"18","hashOfConfig":"13"},{"size":3573,"mtime":1668651349314,"results":"19","hashOfConfig":"13"},{"size":72,"mtime":1666903496646,"results":"20","hashOfConfig":"13"},{"size":2102,"mtime":1666909060245,"results":"21","hashOfConfig":"13"},{"size":4704,"mtime":1668645468588,"results":"22","hashOfConfig":"13"},{"size":226,"mtime":1668647897578,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"1wr5suy",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/chill/Code/School/sharedKeebProjectReact/src/index.js",[],[],[],"/Users/chill/Code/School/sharedKeebProjectReact/src/App.js",[],[],"/Users/chill/Code/School/sharedKeebProjectReact/src/reportWebVitals.js",[],[],"/Users/chill/Code/School/sharedKeebProjectReact/src/pages/About.js",[],[],"/Users/chill/Code/School/sharedKeebProjectReact/src/pages/RedditFeed.js",[],[],"/Users/chill/Code/School/sharedKeebProjectReact/src/pages/Home.js",["61","62","63","64","65","66","67","68","69","70","71"],[],"import { Link, useOutletContext } from 'react-router-dom'\nimport { useState, useEffect } from 'react'\nimport Edit from './Popups'\nimport img1 from './../img/keeb1/img1.jpg';\nimport img2 from './../img/keeb2/20200608_162413.jpg';\nimport img3 from './../img/keeb3/IMG_3824.jpg';\nimport img4 from './../img/keeb4/IMG_3169.jpg';\nimport img5 from './../img/keeb5/64728000108__18187149-7D91-41B8-8C66-AED552C97699.jpg';\nimport img6 from './../img/keeb6/DSC_0023.jpg';\nimport img7 from './../img/keeb7/20200512_173717.jpg';\n\n\nconst Home = () => {\n  const hardCodedPosts = [\n    {\n      id: 1,\n      title: 'Handmade AEKII 40%',\n      subject: 'A good keyboard',\n      imageUrl: img1,\n      user: 'johnstevens'\n    },\n    {\n      id: 2,\n      title: 'Blue and White keyboard',\n      subject: 'A great keyboard',\n      imageUrl: img2,\n      user: 'Roger'\n    },\n    {\n      id: 3,\n      title: 'Laser-cut mini keyboard!',\n      subject: 'A great keyboard',\n      imageUrl: img3,\n      user: 'JessicaAlba'\n    },\n    {\n      id: 4,\n      title: 'Ergo-style keyboard',\n      subject: 'A great keyboard',\n      imageUrl: img4,\n      user: 'Hailey'\n    },\n    {\n      id: 5,\n      title: 'Ergo-style keyboard',\n      subject: 'A great keyboard',\n      imageUrl: img5,\n      user: 'RonaldMcDonald'\n    },\n    {\n      id: 6,\n      title: 'Gamer keyboard',\n      subject: 'A great keyboard',\n      imageUrl: img6,\n      user: 'CalebHill'\n    },\n    {\n      id: 7,\n      title: 'Black and Gray board',\n      subject: 'A great keyboard',\n      imageUrl: img7,\n      user: 'SteveJobs'\n    }\n  ]\n  const [posts, setPosts] = useState([])\n  const [user, setUser] = useOutletContext()\n  const [isOpen, setIsOpen] = useState(false)\n  const [tempTitle, setTempTitle] = useState('')\n  const [tempImageUrl, setTempImageUrl] = useState('')\n  const [id, setId] = useState(0);\n\n  const setupPopup = (title, imageUrl, id) => {\n    setTempTitle(title)\n    setTempImageUrl(imageUrl)\n    setId(id)\n    setIsOpen(true)\n  }\n\n  const deletePost = async (tempId) => {\n    let response\n    try {\n      response = await fetch(`/api/posts/${tempId}`, {\n        method: 'DELETE'\n      })\n    } catch (e) {\n      console.log('error', JSON.stringify(e))\n      return\n    }\n    if (response.status !== 200) {\n      console.log('error deleting post ', response)\n      alert('post not deleted')\n    }\n    await fetchPosts();\n  }\n\n  const savePost = async () => {\n    let response\n    try {\n      response = await fetch(`/api/posts/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title: tempTitle,\n          imageUrl: tempImageUrl\n        })\n      })\n    } catch (e) {\n      console.log('error', JSON.stringify(e))\n      return\n    }\n    if (response.status !== 200) {\n      console.log('error saving post ', response)\n      alert('post not saved')\n    }\n    const data = await response.json()\n    console.log('response data', data)\n    await fetchPosts();\n    setIsOpen(false)\n  }\n\n  const togglePopup = () => {\n    setIsOpen(!isOpen)\n  }\n  const fetchPosts = async () => {\n    const response = await fetch('/api/posts')\n    const fetchedPosts = await response.json()\n    setPosts(fetchedPosts.posts)\n  }\n  useEffect(() => {\n    fetchPosts()\n  }, [])\n\n  const getPosts = async () => {\n    try {\n      const response = await fetch('/api/posts')\n      const fetchedPosts = await response.json()\n      setPosts(fetchedPosts.posts)\n    } catch (e) {\n      console.log('error',JSON.stringify(e))\n    }\n  }\n\n  const renderPosts = () => {\n    const postsToRender = []\n    for (const post of [...posts, ...hardCodedPosts]) {\n      postsToRender.push(\n        (\n          <div className=\"feed-item card\" key={post.id}>\n            <img src={post.imageUrl} className=\"card-img-top\" alt={post.subject} />\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">{post.title}</h5>\n              <p className=\"card-text\">\n                <small className=\"text-muted\">Posted by: @{post.user}</small>\n                {\n                  post.user === user.username ?\n                  <>\n                    <a className=\"clickyMode\" onClick={() => setupPopup(post.title, post.imageUrl, post.id)}><i className=\"fa fa-pencil fa-fw\"></i></a>\n                    <a className=\"clickyMode\" onClick={() => deletePost(post.id)}><i className=\"fa fa-trash fa-fw\"></i></a>\n                    {/*<input type=\"button\" value=\"Edit\" onClick={() => setupPopup(post.title, post.imageUrl, post.id)} />*/}\n                    {/*<input type=\"button\" value=\"Delete\" onClick={() => deletePost(post.id)} />*/}\n                  </>\n                  : null\n                }\n              </p>\n            </div>\n          </div>\n        )\n      )\n      {/*  <div className=\"feed-item card\">*/}\n      {/*    <img className=\"card-img-top\" src={img7} alt=\"Caleb's Keyboard\"/>*/}\n      {/*      <div className=\"card-body\">*/}\n      {/*        <h5 className=\"card-title\">Black and Gray board</h5>*/}\n      {/*        <p className=\"card-text text-muted\">by @SteveJobs</p>*/}\n      {/*      </div>*/}\n      {/*  </div>*/}\n    }\n    console.log(postsToRender)\n    return postsToRender\n  }\n\n  return <div className=\"container\">\n    <div className=\"row\">\n      {!user.username ?\n        <div className=\"col-12\">\n          <p><em>We see that you aren't logged in! To log in, simply enter your password and username. If you haven't\n            made an account, just enter in a new username and password and you will be logged in with those as your new\n            credentials!</em></p>\n        </div> : null\n      }\n      <div className=\"col-sm-8\">\n        <div className=\"page-header header\">\n          <h1>Welcome to the Klique <br/><small>A community of like-minded keyboard hobbyists. Share your board with\n            us!</small></h1>\n          <div className=\"feed-grid\">\n            {renderPosts()}\n          </div>\n        </div>\n      </div>\n      <div className=\"col-sm-4\">\n        <div className=\"action-center\">\n          <Link className=\"btn btn-primary btn-lg btn-block\" to=\"/mongoCP/build/NewPost\">\n            New Post\n          </Link>\n        </div>\n        <br/> <br/>\n        <hr/>\n        <br/>\n        <h4>Getting Started:</h4>\n        <p>\n          To make a post, just click 'New Post' above. You can also edit or delete your posts by clicking the pencil or\n          trash can icons on your posts.\n        </p>\n        <br/>\n        <div className=\"page-content\">\n          <div className=\"card about-us-card bg-light mb3\">\n            <div className=\"card-header\">\n              <h4>Who We Are</h4>\n            </div>\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">Keyboard Klique</h5>\n              <p className=\"card-text\">We are a group of keyboard enthusiasts who love to build and take pictures of\n                keyboards. We are based in the United States, but we have members all over the world. We are always\n                looking for new members to join our club. If you are interested in joining, please contact us!</p>\n              <Link to=\"./About\" className=\"btn btn-primary\">Learn More</Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    {isOpen && <Edit\n      content={<>\n        <h5 className=\"card-title\">New Post</h5>\n        <div className=\"form-group\">\n          <label htmlFor=\"shortTitle\">Short Title</label>\n          <input type=\"text\" className=\"form-control\" id=\"shortTitle\" name=\"title\"\n                 onChange={e => setTempTitle(e.target.value)} value={tempTitle}/>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"image\">URL to Image (upload it on a site like imgur and post the url here):</label>\n          <input type=\"text\" className=\"form-control-file\" value={tempImageUrl}\n                 onChange={e => setTempImageUrl(e.target.value)} id=\"image\" name=\"image\"/>\n        </div>\n        {/*<button type=\"submit\" className=\"btn btn-primary\" onClick={props.handleClose}>Save</button>*/}\n        <button type=\"submit\" className=\"btn btn-primary popup-button\" onClick={savePost}>Save</button>\n        <button type=\"submit\" className=\"btn btn-primary\" onClick={togglePopup}>Cancel</button>\n      </>}\n      // handleClose={togglePopup}\n    />}\n  </div>\n};\n\nexport default Home;\n","/Users/chill/Code/School/sharedKeebProjectReact/src/pages/Layout.js",["72"],[],"import { Outlet, Link } from \"react-router-dom\"\nimport { useState, useEffect } from 'react'\nimport backgroundImage from \"./../img/flickr-banner.jpg\"\n\nconst Layout = () => {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState({})\n\n  const login = async () => {\n    let response\n    try {\n      response = await fetch('/api/user/' + username + '/' + password)\n    } catch (e) {\n      console.log('error',JSON.stringify(e))\n      return\n    }\n    //   console.log('error in logging in ', e)\n    // }\n    if (response.status === 200) {\n      let fetchedUser = await response.json()\n      setUser(fetchedUser.user)\n    } else if (response.status === 401) {\n      alert('incorrect password')\n    } else {\n      console.log('error in logging in ', response)\n    }\n  }\n\n  return (\n    <>\n      <div className=\"card banner bg-dark text-white\">\n        <img className=\"card-img\" src={backgroundImage} style={{opacity: 0.5}} alt=\"Keyboard\"/>\n          <div className=\"card-img-overlay centered\">\n            <h1 className=\"card-title\">Keyboard Klique</h1>\n          </div>\n      </div>\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark sticky-top\">\n        <Link className=\"navbar-brand\" to=\"/mongoCP/build/\">Keyboard Klique</Link>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\"\n                aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/mongoCP/build/\">Home<span className=\"sr-only\">(current)</span></Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/mongoCP/build/About\">About</Link>\n            </li>\n          </ul>\n          <ul className=\"navbar-nav ml-auto\">\n            { user.username ? (\n              <>\n                <li className=\"nav-item\">\n                  <Link className=\"nav-link\"  to=\"\" onClick={() => setUser({})}>Logout</Link>\n                </li>\n              </>\n            ) : (\n              <>\n                <li className=\"nav-item\">\n                  <input type=\"text\" placeholder=\"Username\" value={username} onChange={e => setUsername(e.target.value)}/>\n                  <input type=\"password\" placeholder=\"Password\" value={password} onChange={e => setPassword(e.target.value)}/>\n                  <button className=\"btn btn-primary loginButton\" onClick={login}>Login/Register</button>\n                </li>\n              </>\n            )}\n          </ul>\n        </div>\n      </nav>\n\n      <Outlet context={[user, setUser]}  />\n\n      <footer className=\"bg-dark\">\n        <div className=\"container\">\n          <div className=\"row text-light\">\n            <div className=\"col-sm text-center\">\n              <p>© 2022 Keyboard Klique</p>\n              <p>All Images are property of Caleb Hill</p>\n            </div>\n            <div className=\"col-sm\"></div>\n            <div className=\"col-sm\">\n              <p>Authors:</p>\n              <p>Caleb Hill</p>\n              <p>Ethan Borsky</p>\n              <a href=\"https://github.com/chill389cc/sharedKeyboardProject\">GitHub Repo</a>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </>\n  )\n};\n\nexport default Layout;\n","/Users/chill/Code/School/sharedKeebProjectReact/src/pages/NoPage.js",[],[],"/Users/chill/Code/School/sharedKeebProjectReact/src/redditAPI.js",[],[],"/Users/chill/Code/School/sharedKeebProjectReact/src/pages/NewPost.js",["73"],[],"import { useOutletContext, useNavigate } from \"react-router-dom\";\nimport {useState} from \"react\";\n\n\nconst About = () => {\n  const [user, setUser] = useOutletContext()\n  const [title, setTitle] = useState('');\n  const [subject, setSubject] = useState('');\n  const [body, setBody] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  let navigate = useNavigate()\n\n\n  const makePost = async () => {\n    if (!user) {\n      alert('You must be logged in to make a post')\n      return\n    } else if (!title || !subject || !body || !imageUrl) {\n      alert('Please fill in all fields')\n      return\n    }\n    let response\n    try {\n      response = await fetch('/api/posts', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title,\n          subject,\n          body,\n          imageUrl,\n          user: user.username\n        })\n      })\n    } catch (e) {\n      console.log('error',JSON.stringify(e))\n      return\n    }\n    if (response.status === 200) {\n      let fetchedPost = await response.json()\n      console.log(fetchedPost)\n      navigate('/mongoCP/build/')\n    } else {\n      console.log('error making post ', response)\n    }\n  }\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"row justify-content-around\">\n          <div className=\"col-lg-8\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">New Post</h5>\n                {/*<form>*/}\n                  <div className=\"form-group\">\n                    <label htmlFor=\"shortTitle\">Short Title</label>\n                    <input type=\"text\" className=\"form-control\" id=\"shortTitle\" name=\"title\" onChange={e => setTitle(e.target.value)} placeholder=\"Enter title\"/>\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"longTitle\">Detailed Title</label>\n                    <input type=\"text\" className=\"form-control\" id=\"longTitle\" name=\"title\" onChange={e => setSubject(e.target.value)} placeholder=\"Enter title\"/>\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"description\">Description</label>\n                    <textarea className=\"form-control\" id=\"description\" name=\"description\" onChange={e => setBody(e.target.value)} rows=\"3\"></textarea>\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"image\">URL to Image (upload it on a site like imgur and post the url here):</label>\n                    <input type=\"text\" className=\"form-control-file\" multiple=\"multiple\" onChange={e => setImageUrl(e.target.value)} id=\"image\" name=\"image\"/>\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"username\">Username</label>\n                    <input type=\"text\" className=\"form-control\" id=\"username\" name=\"username\"\n                           placeholder={user.username} disabled/>\n                  </div>\n                  <button type=\"submit\" className=\"btn btn-primary\" onClick={makePost}>Submit</button>\n                {/*</form>*/}\n              </div>\n            </div>\n          </div>\n          <div className=\"col-md-4 post-detail-col\">\n            <div className=\"page-header header\">\n              <h3>Remember the Forum Rules:</h3>\n            </div>\n            <div className=\"page-content\">\n              <ol className=\"list-group list-group-flush\">\n                <li className=\"list-group-item\">\n                  1. Be respectful to others.\n                </li>\n                <li className=\"list-group-item\">\n                  2. Do not spam.\n                </li>\n                <li className=\"list-group-item\">\n                  3. <strong>Do not post anything illegal.</strong>\n                </li>\n                <li className=\"list-group-item\">\n                  4. <strong>Do not post anything that is not keyboard related.</strong>\n                </li>\n                <li className=\"list-group-item\">\n                  5. <strong>No AI generated keyboards</strong>\n                </li>\n                <li className=\"list-group-item\">\n                  6. <strong>No keyboards that are not mechanical</strong>\n                </li>\n                <li className=\"list-group-item\">\n                  7. No Web Scraping (our data stays here)\n                </li>\n                <li className=\"list-group-item\">\n                  8. Have fun!\n                </li>\n              </ol>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n};\n\nexport default About;","/Users/chill/Code/School/sharedKeebProjectReact/src/pages/Popups.js",[],[],{"ruleId":"74","severity":1,"message":"75","line":66,"column":16,"nodeType":"76","messageId":"77","endLine":66,"endColumn":23},{"ruleId":"74","severity":1,"message":"78","line":135,"column":9,"nodeType":"76","messageId":"77","endLine":135,"endColumn":17},{"ruleId":"79","severity":1,"message":"80","line":159,"column":21,"nodeType":"81","endLine":159,"endColumn":110},{"ruleId":"79","severity":1,"message":"80","line":160,"column":21,"nodeType":"81","endLine":160,"endColumn":83},{"ruleId":"82","severity":1,"message":"83","line":171,"column":7,"nodeType":"84","messageId":"85","endLine":171,"endColumn":47},{"ruleId":"82","severity":1,"message":"83","line":172,"column":7,"nodeType":"84","messageId":"85","endLine":172,"endColumn":82},{"ruleId":"82","severity":1,"message":"83","line":173,"column":7,"nodeType":"84","messageId":"85","endLine":173,"endColumn":46},{"ruleId":"82","severity":1,"message":"83","line":174,"column":7,"nodeType":"84","messageId":"85","endLine":174,"endColumn":73},{"ruleId":"82","severity":1,"message":"83","line":175,"column":7,"nodeType":"84","messageId":"85","endLine":175,"endColumn":74},{"ruleId":"82","severity":1,"message":"83","line":176,"column":7,"nodeType":"84","messageId":"85","endLine":176,"endColumn":25},{"ruleId":"82","severity":1,"message":"83","line":177,"column":7,"nodeType":"84","messageId":"85","endLine":177,"endColumn":21},{"ruleId":"74","severity":1,"message":"86","line":2,"column":20,"nodeType":"76","messageId":"77","endLine":2,"endColumn":29},{"ruleId":"74","severity":1,"message":"75","line":6,"column":16,"nodeType":"76","messageId":"77","endLine":6,"endColumn":23},"no-unused-vars","'setUser' is assigned a value but never used.","Identifier","unusedVar","'getPosts' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'useEffect' is defined but never used."]